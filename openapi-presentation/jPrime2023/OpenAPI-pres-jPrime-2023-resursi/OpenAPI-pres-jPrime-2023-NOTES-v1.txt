
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------
--------------------------------


--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------

--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------


--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------


--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------


--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------

--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------


--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------


--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------


--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------

--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------


--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------

API-first! Contract-first! Make API development great again! v2.0

My talk in jPrime is an updated follow-up to my previous one, including all the good stuff from the original, plus new insights, so come to my talk and let's make API development great again together! 💻 🚀

https://lnkd.in/dMYG6tPg
https://www.linkedin.com/posts/jprime_jprime23-activity-7064187294945091584-9msq?utm_source=share&utm_medium=member_desktop

#SchwarzITBulgaria #FullOfProspects #FullOfMeaning #FullOfCreativity
#bulgaria #bgjug
#jPrime23 


--------------------------------
--------------------------------
--------------------------------

I am excited about my upcoming talk - "API-first! Contract-first! Make API development great again! v2.0." at jPrime 2023 conference. I embrace API-first design whenever applicable, and the results have been excellent. By adopting this approach, I have witnessed reduced development times, tighter feedback loops, and overall improved API design. This talk is an updated version of my previous lectures, including all the good essentials from the originals, and incorporating new insights, highlighting the challenges and numerous benefits API-first design brings. Don't miss out on this opportunity to delve into the world of API-first and contract-first design with me. Together, let's embark on a journey towards more efficient and effective API development. 💻🚀

See you there!

https://lnkd.in/dMYG6tPg
https://www.linkedin.com/posts/jprime_jprime23-activity-7064187294945091584-9msq?utm_source=share&utm_medium=member_desktop

#SchwarzITBulgaria #FullOfProspects #FullOfMeaning #FullOfCreativity
#bulgaria #bgjug
#jPrime23 
#conference #itconference

--------------------------------
--------------------------------
--------------------------------


Schwarz IT
Office X, Floor 9, Schwarz IT, bulevard "Cherni vrah" 51, 1407 Promishlena zona Hladilnika, Sofia

--------------------------------
--------------------------------
--------------------------------

API Economy is more generally the practice to exchange data and value between consumers and providers through HTTP-based APIs (REST, SOAP).


All of these things help with your API economy.
API Economy is more generally the practice of exchanging data and value between consumers and providers through HTTP-based APIs such as REST APIs.

All of these things help with your API economy.
An API Economy is more or less, generally the practice of exchanging data and value between consumers and providers through HTTP-based APIs such as REST APIs.

--------------------------------
--------------------------------
--------------------------------

Schwarz Global Services Bulgaria EOOD
https://it.schwarz/en/international/bulgaria
https://www.jobs.bg/company/schwarz-it
https://dev.bg/company/schwarz-it/


API-first! Contract-first! Make API development great again! v2.0 pt.1 - OPENAPI + SPRING REST + JAXRS - Demo Video 1
https://www.youtube.com/watch?v=hB93Apbj5GQ&ab_channel=AtanasKuzmanov
https://www.youtube.com/watch?v=hB93Apbj5GQ
https://youtu.be/hB93Apbj5GQ

API-first! Contract-first! Make API development great again! v2.0 pt.2 - OPENAPI + SPRING REST + JAXRS - Demo Video 2
https://www.youtube.com/watch?v=go_9HquFdac&ab_channel=AtanasKuzmanov
https://www.youtube.com/watch?v=go_9HquFdac
https://youtu.be/go_9HquFdac

OpenAPI + Spring REST + JAX-RS

--------------------------------
--------------------------------
--------------------------------


Schwarz IT Bulgaria is excited to announce Atanas's upcoming talk - "API-first! Contract-first! Make API development great again! v2.0." at jPrime 2023. As a Senior Software Engineer at Schwarz IT Bulgaria, Atanas brings real-world experience and expertise to this topic. The company embraces API-first design whenever applicable, and the results have been excellent. By adopting this approach, we have witnessed reduced development times, tighter feedback loops, and overall improved API design. Atanas's talk is an updated version of his previous presentation, including all the good essentials from the original, and incorporating new insights, highlighting the challenges and numerous benefits API-first design brings. Don't miss out on this opportunity to delve into the world of API-first and contract-first design with us. Together, let's embark on a journey towards more efficient and effective API development. 💻🚀

---

Schwarz IT Bulgaria is proud to announce Atanas's upcoming talk, titled "API-first! Contract-first! Make API development great again! v2.0." As a Senior Software Engineer at Schwarz IT Bulgaria, Atanas brings real-world experience and expertise to this topic. The company embraces API-first design whenever applicable, and the results have been remarkable. By adopting this approach, Schwarz IT Bulgaria has witnessed reduced development times, tighter feedback loops, and overall improved API design. Atanas's talk is an updated version of his previous presentation, incorporating new insights and advancements. This event promises to be an enlightening session, where participants can collaborate and contribute to making API development great again. Don't miss out on this opportunity to delve into the world of API-first and contract-first design with Atanas and his team. Together, let's embark on a journey towards more efficient and effective API development. 💻🚀

---

Schwarz IT Bulgaria is excited to announce Atanas's talk "API-first! Contract-first! Make API development great again! v2.0" this year at jPrime 2023. This updated follow-up to his previous talk includes all the good stuff from the previous one, plus new insights, making it a must-attend session for anyone interested in API development. As a Senior Software Engineer at Schwarz IT Bulgaria, Atanas will share his real-world experience in implementing API-first design, highlighting the challenges and numerous benefits it brings.

---

Schwarz IT Bulgaria is excited to announce Atanas's talk "API-first! Contract-first! Make API development great again! v2.0" at the Java Beer event tonight hosted by us. As a Senior Software Engineer at Schwarz IT Bulgaria, Atanas will share his real-world experience in implementing API-first design, highlighting  the challenges and numerous benefits it brings. This updated follow-up to his previous talk includes new insights, making it a must-attend session for anyone interested in API development. Join us at our modern new office space, Office X, ground floor, Sofia, on May 17, 2023, at 19:00. Let's have a chat about APIs, Java, and other trends over some refreshing Java Beer. Don't miss this opportunity to learn from Atanas and make API development great again! 💻 🚀

---

Please write a paragraph using the information below, talking about Atanas's talk "API-first! Contract-first! Make API development great again! v2.0", Atanas is an employee of Schwarz IT Bulgaria, it has to sound like a publication from the company Schwarz IT Bulgaria, which the PR agency can post:

---


Schwarz IT Bulgaria - a responsible company changing for the better

Atanas, a Senior Software Engineer at SchwarzIT Bulgaria

Coming from real world experience here at Schwarz IT Bulgaria, we use API-first design each time it is applicable, and we have seen some great benefits including reduced development times, tighter feedback loops, and better API design overall.





Schwarz IT Bulgaria - a responsible company changing for the better

Coming from real world experience here at Schwarz IT Bulgaria, we use API-first design each time it is applicable, and we have seen some great benefits including reduced development times, tighter feedback loops, and better API design overall.



API-first! Contract-first! Make API development great again! v2.0

This is an updated follow-up to my previous talk, including all the good stuff from the original, plus new insights, so come to my talk and let's make API development great again together! 💻 🚀


I am a Senior Software Engineer at SchwarzIT Bulgaria

Here is a bit of background about me

- Where do you work?
IT Solution Development Department at Schwarz IT Bulgaria.

- What do you do there?
I am part of the team which develops and maintains our property management CMS systems among others.

- Why are you talking about this topic?
My colleagues gave me a new task, I guess as a bit of a challenge – me being unaware it being something they were unable to solve a couple of years ago.
And for a good reason, the technology wasn’t quite there yet, but after a lot of hard work I was able to solve it. The task was to come up with a way to use contract testing for our APIs without having to write a whole new suit for testing or something similar.

- Why are you giving this talk today?
At the time, to the best of my knowledge, it was very few other companies, using this technology in this particular way, mainly Atlassian, us at SchwarzIT and a few others. It's only recently that I have seen the trend of this raising.
There are not enough blog posts or tutorials on this topic, so, I want to share my real-world findings with you as I think they are innovative, applicable in practice and greatly beneficial.


In the current situation of increased remote working, having a common, simple medium of communication such as an OpenAPI spec document is indispensable in meeting your requirements when building APIs.

Things get even more exciting when this so-called document can:

Serve as a contract

Generate clients, servers, and documentation

Put your developers and client first

Have Automatic, Fail-fast, API Validation tests

Is Cross-Platform and Language Agnostic

Is both human and machine readable in YAML or JSON

Speeds up development

Reduces costs


--------------------------------
--------------------------------
--------------------------------

API-first! Contract-first! Make API development great again! v2.0

--------------------------------
--------------------------------
--------------------------------
[social media / social networks]



---
API-first! Contract-first! Make API development great again! v2.0
This is an updated follow-up to my previous talk, including all the good stuff from the original, plus new insights, so come to my talk and let's make API development great again together! 💻 🚀

---

API-first! Contract-first! Make API development great again! v2.0

Come to Java Beer in May @ Sofia event, in Schwarz IT Bulgaria's modern new office space, and we can have a chat about APIs, Java and other trends.
Where: Office X, ground floor, Sofia
When: 17 May 2023 @ 19:00

My talk in jPrime is an updated follow-up to my previous one, including all the good stuff from the original, plus new insights, so come to my talk and let's make API development great again together! 💻 🚀

https://www.linkedin.com/posts/schwarz-it-bulgaria_event-bulgaria-javabeer-activity-7059835227619115008-lZAk?utm_source=share&utm_medium=member_desktop

#SchwarzITBulgaria #FullOfProspects #FullOfMeaning #FullOfCreativity
#bulgaria #javabeer #bgjug
#jPrime23 

-

API-first! Contract-first! Make API development great again! v2.0
Come to Java Beer in May @ Sofia event, in Schwarz IT Bulgaria's modern new office space, and we can have a chat about APIs, Java and other trends.
Where: Office X, ground floor, Sofia
When: 17 May 2023 @ 19:00
#SchwarzITBulgaria #FullOfProspects #FullOfMeaning #FullOfCreativity
#bulgaria #javabeer #bgjug
#jPrime23


---
[jPrime 2023]

[twitter jPrime 2023]
https://twitter.com/jPrimeConf/status/1658421368453570562?fbclid=IwAR1yKawdkQ4fXfb6bJxcNcdcE4ah8DQxhhThuezw5dDoi8esBKQWiqBpIoM
https://twitter.com/jPrimeConf/status/1658421368453570562/photo/1


[linkedin jPrime 2023]
https://www.linkedin.com/posts/atkuzmanov_jprime23-activity-7064218099377446912-SiDO?utm_source=share&utm_medium=member_desktop


---
[social media / social networks - old]


API-First! Contract-First! Make API development great again! 📜💻 🏗📈🚀
Things get exciting when а so-called API spec (OpenAPI) document can build, validate APIs, be a contract, generate clients, servers, docs, and much more... Come at our talk! #hackconf https://bit.ly/3hbxV7R

API-First! Contract-First! Make API development great again! 📜💻 🏗📈🚀
When а so-called API spec (OpenAPI) document can build, validate APIs, be a contract, generate clients, servers, docs, and much more... Come at our talk! #hackconf https://bit.ly/3hbxV7R

---
hashtags:

#hackconf #schwarzitbulgaria
#openapi #swagger #apis #apidevelopment #programming #coding #developers #coders #devs #programmers #devcommunity
#java #springboot #javascript #angular #typescript #development #share #like #backend #frontend #webdevelopment 

hashtags 2:

#hackconf #schwarzitbulgaria #schwarzit
#api #backend #frontend #fullstack #java #springboot #javascript #angular #typescript #development #dev
#programming #coding #developers #coders #devs #programmers #DEVCommunity

---

Original tweet:

https://twitter.com/HackConf_/status/1410875412096421888

---

My tweet:

https://twitter.com/atkuzmanov/status/1410903220768157702

https://twitter.com/atkuzmanov/status/1410903220768157702?s=20

---

images:

https://pbs.twimg.com/media/E5RvZHVX0AIpt4R?format=jpg&name=large

https://pbs.twimg.com/media/E5RvZHVX0AIpt4R?format=jpg&name=small

---

Facebook post:

API-First! Contract-First! Make API development great again!📜💻 🏗📈🚀
When а so-called API spec (OpenAPI) document can build, validate APIs, be a contract, generate clients, servers, docs, and much more... Come at our talk! #hackconf #schwarzitbulgaria
#programming #coding #developers #coders #devs #programmers #DEVCommunity
Please like and share the tweets and this post if you can! ( :
https://twitter.com/HackConf_/status/1410875412096421888
https://twitter.com/atkuzmanov/status/1410903220768157702

--- 

LinkedIn post:

API-First! Contract-First! Make API development great again!📜💻 🏗📈🚀

When а so-called API spec (OpenAPI) document can build, validate APIs, be a contract, generate clients, servers, docs, and much more... Come at our talk! #hackconf #schwarzitbulgaria



Please like and share the tweets and this post if you can!

https://lnkd.in/e42VBh5

https://lnkd.in/eqyRiD6 

#openapi #swagger #apis #apidevelopment #programming #coding #developers #coders #devs #programmers #devcommunity 

#java #springboot #javascript #angular #typescript #development #share #like #backend #frontend #webdevelopment


https://www.linkedin.com/posts/atkuzmanov_hackconf-on-twitter-activity-6816671881303793664-u7C0

[hackconf2021 video 1]

See you @ Hackconf2021! ( :
"API-First! Contract-First! Make API development great again!"📜💻 🏗📈🚀

#hackconf #schwarzitbulgaria #schwarzit
#api #backend #frontend #fullstack #java #springboot #javascript #angular #typescript #development #dev
#programming #coding #developers #coders #devs #programmers #DEVCommunity

Social media links:
https://twitter.com/HackConf_/status/1448615899745894402?s=20
https://www.linkedin.com/posts/hackconf_atanas-kuzmanov-api-first-contract-first-activity-6854382198246674432-dQxF
https://www.facebook.com/HackConference/videos/397132632049472


Personal social media links:
https://twitter.com/atkuzmanov/status/1448633648056524801?s=20
https://www.linkedin.com/posts/atkuzmanov_atanas-kuzmanov-api-first-contract-first-activity-6854399635801346048-auQz
https://www.facebook.com/watch/?v=397132632049472&ref=sharing
https://fb.watch/8DUuMEyjqL/
https://www.facebook.com/HackConference/videos/397132632049472

--------------------------------
[hackconf2021 photos and videos]

https://www.flickr.com/photos/hackconf/albums/72157720108927557/page1

https://www.youtube.com/channel/UClxooLdBT49Kp9_UC0l_7gQ

--------------------------------
[hackconf2021 videos and slides]

https://www.youtube.com/watch?v=yqrZMEraAJ8&list=PLmpSOHJJON0D0u7Cy_k68UqCgBWSKrieu&index=14

https://www.hackconf.bg/news/slides-photos-videos-hackconf-2021-online-edition/
https://drive.google.com/file/d/1CBQ8eO2yPjB3W8p-BtF7_3QZSnRITTe8/view


HackConf Facebook post:

Didn't get a chance to catch all the sessions at HackConf 2021 Online edition? Worry not! 🙌
- Videos from the talks: https://www.youtube.com/playlist?list=PLmpSOHJJON0D0u7Cy_k68UqCgBWSKrieu
- Slides: https://www.hackconf.bg/news/slides-photos-videos-hackconf-2021-online-edition/
Check them out and enjoy!


Social media links:
https://twitter.com/HackConf_/status/1458405455223533569
https://www.linkedin.com/posts/hackconf_didnt-get-a-chance-to-catch-all-the-sessions-activity-6864170954583506944-ZFrS
https://www.facebook.com/HackConference/posts/3639014929716886

---

- Video of my talk: https://www.youtube.com/watch?v=yqrZMEraAJ8&list=PLmpSOHJJON0D0u7Cy_k68UqCgBWSKrieu&index=16
- Slides from my talk: https://drive.google.com/file/d/1CBQ8eO2yPjB3W8p-BtF7_3QZSnRITTe8/view
- Videos of the other talks: https://www.youtube.com/playlist?list=PLmpSOHJJON0D0u7Cy_k68UqCgBWSKrieu
- Slides from the other talks: https://www.hackconf.bg/news/slides-photos-videos-hackconf-2021-online-edition/

- Video: shorturl.at/sOPX6
- Videos from the talks: shorturl.at/rEMW7
- Slides: shorturl.at/behrH

---
[my-links]

Personal social media links:
https://twitter.com/atkuzmanov/status/1458443030399176706
https://www.linkedin.com/posts/atkuzmanov_didnt-get-a-chance-to-catch-all-the-sessions-activity-6864215381284831233-rn0q
https://www.linkedin.com/feed/update/urn:li:activity:6864215381284831233/
https://www.facebook.com/atkuzmanov/posts/4703583576352406
https://www.instagram.com/p/CWGY1JHKN-LzAOKCrwjiccAshsGf-6MPGjQsxU0/


"API-First! Contract-First! Make API development great again!"📜💻 🏗
Didn't get a chance to catch my session at HackConf 2021 Online edition? Worry not!
- Video: shorturl.at/sOPX6
- Videos from the talks: shorturl.at/rEMW7
- Slides: shorturl.at/behrH
Check them out and enjoy!

#hackconf #schwarzitbulgaria #schwarzit
#api #backend #frontend #fullstack #java #springboot #javascript #angular #typescript #development #dev
#programming #coding #developers #coders #devs #programmers #DEVCommunity

---

"API-First! Contract-First! Make API development great again!"📜💻 🏗
🎬🍿✨VIDEO and SLIDES are out! 🎬🍿✨
- Video of my talk: https://www.youtube.com/watch?v=yqrZMEraAJ8&list=PLmpSOHJJON0D0u7Cy_k68UqCgBWSKrieu&index=16
- Slides from my talk: https://drive.google.com/file/d/1CBQ8eO2yPjB3W8p-BtF7_3QZSnRITTe8/view
- Videos of the other talks: https://www.youtube.com/playlist?list=PLmpSOHJJON0D0u7Cy_k68UqCgBWSKrieu
- Slides from the other talks: https://www.hackconf.bg/news/slides-photos-videos-hackconf-2021-online-edition/
Check them out and enjoy!

Twitter: https://twitter.com/atkuzmanov/status/1458443030399176706
LinkedIn: https://www.linkedin.com/posts/atkuzmanov_didnt-get-a-chance-to-catch-all-the-sessions-activity-6864215381284831233-rn0q

#hackconf #schwarzitbulgaria #schwarzit
#api #backend #frontend #fullstack #java #springboot #javascript #angular #typescript #development #dev
#programming #coding #developers #coders #devs #programmers #DEVCommunity

--------------------------------

Ето видео от конференцията:
https://www.youtube.com/watch?v=yqrZMEraAJ8&list=PLmpSOHJJON0D0u7Cy_k68UqCgBWSKrieu&index=15

И снимки от събитието:
https://www.flickr.com/photos/hackconf/51648932581/in/album-72157720108927557/

--------------------------------


--------------------------------
[video-demo-links-youtube]
[youtube-videos]
[youtube-demo-videos]
[youtube-links]

YouTube demo videos links

Part 1:
https://www.youtube.com/watch?v=KGgqdpDWh0I
https://youtu.be/KGgqdpDWh0I

API-first! Contract-first! Make API development great again!

OpenAPI Contract Testing and Validation Demo Part 1

0:00 OpenAPI spec
1:10 Generate back-end from OpenAPI spec
2:00 Compile back-end
2:45 Run back-end
3:00 Generated API in browser
3:28 Developing back-end and front-end in parallel
4:35 Create a new empty Angular project
5:39 Generate front-end from OpenAPI spec
7:30 Switching to same projects with added "glue" code
8:30 Start a Docker container with MongoDB
8:50 Compile front-end
10:32 Try out the back-end with a test pet
10:52 Check the database
11:11 Run front-end

Part 2:
https://www.youtube.com/watch?v=0AvPftcZvWY
https://youtu.be/0AvPftcZvWY

API-first! Contract-first! Make API development great again!

OpenAPI Contract Testing and Validation Demo Part 2

0:00 Access the front-end
0:08 View test pet from the back-end in the front-end
0:26 Innovation - introduction 
0:47 Innovation - back-end api contract validation tests
2:56 Innovation - make back-end api validation test fail because of code
3:48 Innovation - make back-end api validation test fail because of OpenAPI spec document
6:50 Innovation - enforcing contracts
7:20 Innovation - front-end api contract validation tests
8:45 Innovation - make front-end api validation test fail because of code
9:08 Innovation - make front-end api validation test fail because of OpenAPI spec document
10:00 Angular test
10:38 Summary
12:30 Thank you

--------------------------------



--------------------------------
--------------------------------
--------------------------------

Icebreaker questions:

1. Does it work with other libraries than RestAssured?
 - Yes, it works with SpringMVC, WireMock, MockMVC, spring-web-client.
2. Can you use it for real-time validation?
  - Yes, although you need to be careful. You can fine tune it with different levels of validation for example only requests or only responses or both.
3. Is it too late to use contract testing if we are not starting from scratch and the project is already built?
  - No, it's never too late, although you might loose some benefits, and it might be easier to only use it for testing and not feasible for realtime validation.
4. Do you know of any other contract validation tools?
  - Yes, Pact is one of them, although I have not personally used it: https://docs.pact.io/
  - Stoplight is another one: https://stoplight.io/

--------------------------------

Icebreaker questions:

1. Does it work with other libraries than RestAssured?
2. Can you use it for real-time validation?
3. Is it too late to use contract testing if we are not starting from scratch and the project is already built?
4. Do you know of any other contract validation tools?



--------------------------------
--------------------------------
--------------------------------

API-first! Contract-first! Make API development great again! v2.0 pt.1

API-First v2 Spring REST JAX-RS OpenAPI v1 2023-05-01 pt.1

A demo or walkthrough code using Java, Spring Boot, Spring REST and JAX-RS in the same code base and generating Swagger OpenAPI Spec files from all of it.

--------------------------------
--------------------------------
--------------------------------


http://localhost:8080/swagger-ui/index.html?urls.primaryName=SWAGGER-springdoc-default-generated-openapi-spec

http://localhost:8080/v3/api-docs/swagger-config

http://localhost:8080/swagger-openapi-specs/org-springdoc-openapi-maven-plugin-generated-swagger-openapi-spec.json

http://localhost:8080/swagger-openapi-specs/openapi-spec-with-nullables.json

http://localhost:8080/JAX-RS-io-swagger-core-v3-swagger-maven-plugin-generated-openapi-spec.json

http://localhost:8080/v3/api-docs/


--------------------------------
--------------------------------
--------------------------------

- Оправи диаграми [v]
- Запиши демо []
- Оправи анимации []
- Смени темплейт на презентация []
- Оправи линкове []
- Добави за АПИ икономика? []

--------------------------------
--------------------------------
--------------------------------





Even when you start with writing a spec file first before writing any code, and then you write or generate code, you eventually end up generating the spec from the code. This happens because over time when the code base matures it grows and evolves in different ways and often manipulating the spec manually becomes difficult, tedious and time-consuming. Moving the code-to-spec genration is the natural progression of an API First project in it's lifecycle.


--------------------------------
--------------------------------
--------------------------------


API First means that implementation starts with the definition of an API. 

The API defines the contract for providers and consumers to rely on, i.e. the interface is clearly defined. 


The API First approach gives us the following main advantages:


Allows early feedback from stakeholders with fast turnaround cycles.

Happens at a stage when changes in a project are easily doable, before a lot of time and effort is sunk into the project. 

Leads to APIs with better user experience and higher customer satisfaction.

Reduces coupling and enables independently working provider and consumer teams.

Once the direction has been solidified, the design then serves as the contract that all teams can work on in parallel.


Single Source of Truth – The API definition can be the source of truth for Developers, DevOps and Architects.



--------------------------------
--------------------------------
--------------------------------

---
---
---

doa-property-directory/pom.xml
Dependencies and plugins.


/src/main/resources/application.yml
Springdoc dependency configuration.


/src/main/resources/openapi-configuration.yaml
Config for spec  generation.



/src/main/java/com/kaufland/property/directory/config/JerseyConfig.java
Registering OpenApi resources for spec generation


/src/main/java/com/kaufland/property/directory/config/SwaggerConfig.java
Swagger configuration.


/src/main/java/com/kaufland/property/directory/controller/IndexController.java
A controller for the Swagger ui.


/src/test/java/com/kaufland/property/directory/service/geocoder/OpenApiContractValidationTests.java
Tests using Atlassian's OpenApiValidationFilter to validate the code against an OpenAPI spec file.


/src/test/java/com/kaufland/property/directory/OpenAPIModifier.java
Custom OpenAPIModifer class to modify our OpenAPI spec file before the tests run.

---
---
---

doa-property-directory/pom.xml
- Necessary dependencies and plugins added.


/src/main/resources/application.yml
- Springdoc dependency configuration.


/src/main/resources/openapi-configuration.yaml
- Configuration which influances the generation of an OpenAPI Swagger spec file from our existing codebase.
  In this case it is used to add some information which was missing from the generated OpenAPI Swagger spec file,
  which is necessary to make it valid, for example the "info" and "servers" sections.


/src/main/java/com/kaufland/property/directory/config/JerseyConfig.java
- Registering OpenApi resources for generation of OpenApi swagger spec here.


/src/main/java/com/kaufland/property/directory/config/SwaggerConfig.java
- Some configuration for re-directing to the swagger ui.


/src/main/java/com/kaufland/property/directory/controller/IndexController.java
- A controller for re-directing to the swagger ui by default.


/src/test/java/com/kaufland/property/directory/service/geocoder/GeocodingAPIInboundSwaggerOpenApiTestIT.java
- This test uses Atlassian's OpenApiValidationFilter to validate our code against our OpenAPI Swagger spec file,
  which is describing our APIs. It is using a custom OpenAPIModifer.class to modify our OpenAPI Swagger spec file
  before it runs the tests. This is so, because the OpenAPI validator will check for all possible components and
  properties and fail if any one  of them is null or missing. This would mean we have to mock basically everything
  which is not feasible. So, instead OpenAPIModifer.class adds the "nullable" property to our OpenAPI spec, so that
  we can test only for the paths, components, schemas etc. which we are currently interested in in any given test.


/src/test/java/com/kaufland/property/directory/OpenAPIModifier.java
- This is a custom OpenAPIModifer.class to modify our OpenAPI Swagger spec file before the tests run.
  This is so, because Atlassian's OpenAPI validator will check for all possible components and properties and fail
  if any one of them is null or missing. This would mean we have to mock basically everything which is not feasible.
  So, instead OpenAPIModifer.class adds the "nullable" property to our OpenAPI spec, so that we can test only for
  the paths, components, schemas etc. which we are currently interested in, in any given test.
  
  
---
---
---

- `doa-property-directory/pom.xml`
  - Necessary dependencies and plugins added.


- `/src/main/resources/application.yml`
  - Springdoc dependency configuration.


- `/src/main/resources/openapi-configuration.yaml`
  - Configuration which influances the generation of an OpenAPI Swagger spec file from our existing codebase.
  In this case it is used to add some information which was missing from the generated OpenAPI Swagger spec file,
  which is necessary to make it valid, for example the "info" and "servers" sections.


- `/src/main/java/com/kaufland/property/directory/config/JerseyConfig.java`
  - Registering OpenApi resources for generation of OpenApi swagger spec here.


- `/src/main/java/com/kaufland/property/directory/config/SwaggerConfig.java`
    - Some configuration for re-directing to the swagger ui.


- `/src/main/java/com/kaufland/property/directory/controller/IndexController.java`
    - A controller for re-directing to the swagger ui by default.


- `/src/test/java/com/kaufland/property/directory/service/geocoder/GeocodingAPIInboundSwaggerOpenApiTestIT.java`
  - This test uses Atlassian's OpenApiValidationFilter to validate our code against our OpenAPI Swagger spec file,
  which is describing our APIs. It is using a custom OpenAPIModifer.class to modify our OpenAPI Swagger spec file
  before it runs the tests. This is so, because the OpenAPI validator will check for all possible components and
  properties and fail if any one  of them is null or missing. This would mean we have to mock basically everything
  which is not feasible. So, instead OpenAPIModifer.class adds the "nullable" property to our OpenAPI spec, so that
  we can test only for the paths, components, schemas etc. which we are currently interested in in any given test.


- `/src/test/java/com/kaufland/property/directory/OpenAPIModifier.java`
  - This is a custom OpenAPIModifer.class to modify our OpenAPI Swagger spec file before the tests run.
  This is so, because Atlassian's OpenAPI validator will check for all possible components and properties and fail
  if any one of them is null or missing. This would mean we have to mock basically everything which is not feasible.
  So, instead OpenAPIModifer.class adds the "nullable" property to our OpenAPI spec, so that we can test only for
  the paths, components, schemas etc. which we are currently interested in, in any given test.
  
---

--------------------------------
--------------------------------
--------------------------------

http://localhost:8080/swagger-ui/index.html?urls.primaryName=springfox-generated-openapi-spec

http://localhost:8080/swagger-openapi-specs/spring-petstore-jaxrs-v1-springfox-generated-swagger-openapi-spec.json

http://localhost:8080/spring-petstore-jaxrs-v1-openapi.json

http://localhost:8080/v3/api-docs/



http://localhost:8080/v3/api-docs/swagger-config

---

http://localhost:8080/swagger.json

http://localhost:8080/swagger-ui/index.html?urls.primaryName=jax-rs-petfood-swagger-openapi-spec

--------------------------------
--------------------------------
--------------------------------


can you please write a java jax-rs rest service implementation using jersey configuration on the swagger openapi pet store api specification
ANSWER
To implement a Java JAX-RS REST service using Jersey configuration on the Swagger OpenAPI Pet Store API specification, the following steps can be followed:

First, we need to add the required dependencies for Jersey in our project. We can do this by adding the following dependency to our Gradle or Maven file:
compile 'org.glassfish.jersey.containers:jersey-container-servlet:2.25.1'

Next, we need to create a new Java class that will represent our REST service. We can use the @Path annotation to specify the path of our service, and the @GET, @POST, @PUT, @DELETE annotations to specify the HTTP methods that our service will support. We can also use the @Produces and @Consumes annotations to specify the media types that our service will produce and consume.
Here's an example of a simple REST service that returns a list of pets:

@Path("/pets")
public class PetService {

    @GET
    @Produces(MediaType.APPLICATION_JSON)
    public List<Pet> getPets() {
        // Code to retrieve list of pets from database or API
    }

    @POST
    @Consumes(MediaType.APPLICATION_JSON)
    public Response addPet(Pet pet) {
        // Code to add a new pet to the database or API
        return Response.status(Response.Status.CREATED).build();
    }

    @PUT
    @Path("/{id}")
    @Consumes(MediaType.APPLICATION_JSON)
    public Response updatePet(@PathParam("id") int id, Pet pet) {
        // Code to update an existing pet in the database or API
        return Response.status(Response.Status.OK).build();
    }

    @DELETE
    @Path("/{id}")
    public Response deletePet(@PathParam("id") int id) {
        // Code to delete an existing pet from the database or API
        return Response.status(Response.Status.NO_CONTENT).build();
    }
}
Once we have defined our REST service, we need to configure Jersey to use it. We can do this by creating a ResourceConfig object and registering our service with it. We can also configure other settings such as package scanning, logging, and error handling.
Here's an example of a configuration class that registers our PetService:

public class MyApplication extends ResourceConfig {

    public MyApplication() {
        register(PetService.class);
    }
}
Finally, we need to deploy our application to a servlet container such as Tomcat or Jetty. We can do this by creating a WAR file and deploying it to the container. We may also need to configure the container to use Jersey as its JAX-RS implementation.
Here's an example of a web.xml file that configures Jersey as the JAX-RS implementation:

<web-app>
  <servlet>
    <servlet-name>MyApplication</servlet-name>
    <servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>
    <init-param>
      <param-name>javax.ws.rs.Application</param-name>
      <param-value>com.example.MyApplication</param-value>
    </init-param>
  </servlet>
  <servlet-mapping>
    <servlet-name>MyApplication</servlet-name>
    <url-pattern>/api/*</url-pattern>
  </servlet-mapping>
</web-app>
To use the Swagger OpenAPI Pet Store API specification in our service, we can generate Java classes from the Swagger definition using a code generator such as Swagger Codegen. We can then use these classes in our service to interact with the API.
Here's an example of how we can use the generated PetApi class to retrieve a list of pets from the Swagger API:

@Path("/pets")
public class PetService {

    private PetApi petApi;

    public PetService() {
        this.petApi = new PetApi();
    }

    @GET
    @Produces(MediaType.APPLICATION_JSON)
    public List<Pet> getPets() {
        List<Pet> pets = petApi.findPetsByStatus(Arrays.asList("available"));
        return pets;
    }

    // Other methods...
}
Overall, using JAX-RS and Jersey can make the development of RESTful services easier and more standardized. It provides a set of annotations and interfaces that allow us to define our service in a clear and concise way, and it also provides a built-in client library that we can use for testing and building clients. However, we also need to be aware of the different implementations of JAX-RS and choose the one that best fits our needs. Additionally, using Swagger OpenAPI can help us to create a more standardized and interoperable API by providing a machine-readable definition of our service.

 
--------------------------------
--------------------------------
--------------------------------



Sure, here's a sample implementation of a Java JAX-RS REST service using Jersey based on the provided OpenAPI Petstore API specification:

java
Copy code
import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

@ApplicationPath("/")
public class PetstoreApplication extends Application {
  // Left empty intentionally
}
java
Copy code
import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.FormParam;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.UriInfo;

@Path("/pet")
public class PetResource {

  @PUT
  @Consumes(MediaType.APPLICATION_JSON)
  public Response updatePet(Pet pet) {
    // Implementation code goes here
    return Response.ok().build();
  }

  @POST
  @Consumes(MediaType.APPLICATION_JSON)
  public Response addPet(Pet pet) {
    // Implementation code goes here
    return Response.ok().build();
  }

  @GET
  @Path("/findByStatus")
  public Response findPetsByStatus(@QueryParam("status") String status) {
    // Implementation code goes here
    return Response.ok().build();
  }

  @GET
  @Path("/findByTags")
  public Response findPetsByTags(@QueryParam("tags") String tags) {
    // Implementation code goes here
    return Response.ok().build();
  }

  @GET
  @Path("/{petId}")
  public Response getPetById(@PathParam("petId") Long petId) {
    // Implementation code goes here
    return Response.ok().build();
  }

  @POST
  @Path("/{petId}")
  public Response updatePetWithForm(
      @PathParam("petId") Long petId,
      @FormParam("name") String name,
      @FormParam("status") String status) {
    // Implementation code goes here
    return Response.ok().build();
  }

  @DELETE
  @Path("/{petId}")
  public Response deletePet(@PathParam("petId") Long petId) {
    // Implementation code goes here
    return Response.ok().build();
  }
}
Note that the implementation of the service methods has been omitted, as the details of the implementation will depend on your specific requirements. Also, the Pet class referenced in the implementation is assumed to be a Java object that represents a Pet, which should contain fields corresponding to the properties of the Pet specified in the OpenAPI specification.


---

can you please write a java jax-rs rest service implementation using jersey best on this api specification:

openapi: 3.0.0
info:
  title: OpenAPI Petstore
  description: This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters. For OAuth2 flow, you may use `user` as both username and password when asked to login.
  license:
    name: Apache-2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about OpenAPI generator
  url: https://openapi-generator.tech
tags:
- name: pet
  description: Everything about your Pets
- name: store
  description: Access to Petstore orders
- name: user
  description: Operations about user
paths:
  /pet:
    put:
      tags:
      - pet
      summary: Update an existing pet
      operationId: updatePet
      requestBody:
        $ref: '#/components/requestBodies/Pet'
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Pet not found
        405:
          description: Validation exception
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      x-accepts: application/json
      x-tags:
      - tag: pet
      x-contentType: application/json
    post:
      tags:
      - pet
      summary: Add a new pet to the store
      operationId: addPet
      requestBody:
        $ref: '#/components/requestBodies/Pet'
      responses:
        405:
          description: Invalid input
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      x-accepts: application/json
      x-tags:
      - tag: pet
      x-contentType: application/json
  /pet/findByStatus:
    get:
      tags:
      - pet
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
      - name: status
        in: query
        description: Status values that need to be considered for filter
        required: true
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
            default: available
            enum:
            - available
            - pending
            - sold
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        400:
          description: Invalid status value
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      x-accepts: application/json
      x-tags:
      - tag: pet
  /pet/findByTags:
    get:
      tags:
      - pet
      summary: Finds Pets by tags
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      operationId: findPetsByTags
      parameters:
      - name: tags
        in: query
        description: Tags to filter by
        required: true
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        400:
          description: Invalid tag value
      deprecated: true
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      x-accepts: application/json
      x-tags:
      - tag: pet
  /pet/{petId}:
    get:
      tags:
      - pet
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      parameters:
      - name: petId
        in: path
        description: ID of pet to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        400:
          description: Invalid ID supplied
        404:
          description: Pet not found
      security:
      - api_key: []
      x-accepts: application/json
      x-tags:
      - tag: pet
    post:
      tags:
      - pet
      summary: Updates a pet in the store with form data
      operationId: updatePetWithForm
      parameters:
      - name: petId
        in: path
        description: ID of pet that needs to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body'
      responses:
        405:
          description: Invalid input
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      x-accepts: application/json
      x-tags:
      - tag: pet
      x-contentType: application/x-www-form-urlencoded
    delete:
      tags:
      - pet
      summary: Deletes a pet
      operationId: deletePet
      parameters:
      - name: api_key
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
      - name: petId
        in: path
        description: Pet id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        400:
          description: Invalid pet value
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      x-accepts: application/json
      x-tags:
      - tag: pet
  /pet/{petId}/uploadImage:
    post:
      tags:
      - pet
      summary: uploads an image
      operationId: uploadFile
      parameters:
      - name: petId
        in: path
        description: ID of pet to update
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_1'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      x-accepts: application/json
      x-tags:
      - tag: pet
      x-contentType: multipart/form-data
  components:
  schemas:
    Order:
      title: Pet Order
      type: object
      properties:
        id:
          type: integer
          format: int64
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
          - placed
          - approved
          - delivered
        complete:
          type: boolean
          default: false
      description: An order for a pets from the pet store
      example:
        petId: 6
        quantity: 1
        id: 0
        shipDate: 2000-01-23T04:56:07.000+00:00
        complete: false
        status: placed
      xml:
        name: Order
    Category:
      title: Pet category
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      description: A category for a pet
      example:
        name: name
        id: 6
      xml:
        name: Category
    User:
      title: a User
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
      description: A User who is purchasing from the pet store
      example:
        firstName: firstName
        lastName: lastName
        password: password
        userStatus: 6
        phone: phone
        id: 0
        email: email
        username: username
      xml:
        name: User
    Tag:
      title: Pet Tag
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      description: A tag for a pet
      example:
        name: name
        id: 1
      xml:
        name: Tag
    Pet:
      title: a Pet
      required:
      - name
      - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
          - available
          - pending
          - sold
      description: A pet for sale in the pet store
      example:
        photoUrls:
        - photoUrls
        - photoUrls
        name: doggie
        id: 0
        category:
          name: name
          id: 6
        tags:
        - name: name
          id: 1
        - name: name
          id: 1
        status: available
      xml:
        name: Pet
    ApiResponse:
      title: An uploaded response
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      description: Describes the result of uploading an image resource
      example:
        code: 0
        type: type
        message: message
    body:
      type: object
      properties:
        name:
          type: string
          description: Updated name of the pet
        status:
          type: string
          description: Updated status of the pet
    body_1:
      type: object
      properties:
        additionalMetadata:
          type: string
          description: Additional data to pass to server
        file:
          type: string
          description: file to upload
          format: binary
  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      required: true
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
      required: true
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: /api/oauth/dialog
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header



--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------
--------------------------------


--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------

--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------


--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------


--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------


--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------

--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------


--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------


--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------


--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------

--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------


--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------




--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------


--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------

--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------


--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------


--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------

--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------
--------------------------------

 
--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------


