
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------
--------------------------------


--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------

--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------


--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------


--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------


--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------

--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------


--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------


--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------


--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------

--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------


--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------




--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------


--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------

--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------
--------------------------------



--------------------------------
--------------------------------
--------------------------------

API-first! Contract-first! Make API development great again! v2.0 pt.1

API-First v2 Spring REST JAX-RS OpenAPI v1 2023-05-01 pt.1

A demo or walkthrough code using Java, Spring Boot, Spring REST and JAX-RS in the same code base and generating Swagger OpenAPI Spec files from all of it.

--------------------------------
--------------------------------
--------------------------------


http://localhost:8080/swagger-ui/index.html?urls.primaryName=SWAGGER-springdoc-default-generated-openapi-spec

http://localhost:8080/v3/api-docs/swagger-config

http://localhost:8080/swagger-openapi-specs/org-springdoc-openapi-maven-plugin-generated-swagger-openapi-spec.json

http://localhost:8080/swagger-openapi-specs/openapi-spec-with-nullables.json

http://localhost:8080/JAX-RS-io-swagger-core-v3-swagger-maven-plugin-generated-openapi-spec.json

http://localhost:8080/v3/api-docs/


--------------------------------
--------------------------------
--------------------------------

- Оправи диаграми [v]
- Запиши демо []
- Оправи анимации []
- Смени темплейт на презентация []
- Оправи линкове []
- Добави за АПИ икономика? []

--------------------------------
--------------------------------
--------------------------------





Even when you start with writing a spec file first before writing any code, and then you write or generate code, you eventually end up generating the spec from the code. This happens because over time when the code base matures it grows and evolves in different ways and often manipulating the spec manually becomes difficult, tedious and time-consuming. Moving the code-to-spec genration is the natural progression of an API First project in it's lifecycle.


--------------------------------
--------------------------------
--------------------------------


API First means that implementation starts with the definition of an API. 

The API defines the contract for providers and consumers to rely on, i.e. the interface is clearly defined. 


The API First approach gives us the following main advantages:


Allows early feedback from stakeholders with fast turnaround cycles.

Happens at a stage when changes in a project are easily doable, before a lot of time and effort is sunk into the project. 

Leads to APIs with better user experience and higher customer satisfaction.

Reduces coupling and enables independently working provider and consumer teams.

Once the direction has been solidified, the design then serves as the contract that all teams can work on in parallel.


Single Source of Truth – The API definition can be the source of truth for Developers, DevOps and Architects.



--------------------------------
--------------------------------
--------------------------------

---
---
---

doa-property-directory/pom.xml
Dependencies and plugins.


/src/main/resources/application.yml
Springdoc dependency configuration.


/src/main/resources/openapi-configuration.yaml
Config for spec  generation.



/src/main/java/com/kaufland/property/directory/config/JerseyConfig.java
Registering OpenApi resources for spec generation


/src/main/java/com/kaufland/property/directory/config/SwaggerConfig.java
Swagger configuration.


/src/main/java/com/kaufland/property/directory/controller/IndexController.java
A controller for the Swagger ui.


/src/test/java/com/kaufland/property/directory/service/geocoder/OpenApiContractValidationTests.java
Tests using Atlassian's OpenApiValidationFilter to validate the code against an OpenAPI spec file.


/src/test/java/com/kaufland/property/directory/OpenAPIModifier.java
Custom OpenAPIModifer class to modify our OpenAPI spec file before the tests run.

---
---
---

doa-property-directory/pom.xml
- Necessary dependencies and plugins added.


/src/main/resources/application.yml
- Springdoc dependency configuration.


/src/main/resources/openapi-configuration.yaml
- Configuration which influances the generation of an OpenAPI Swagger spec file from our existing codebase.
  In this case it is used to add some information which was missing from the generated OpenAPI Swagger spec file,
  which is necessary to make it valid, for example the "info" and "servers" sections.


/src/main/java/com/kaufland/property/directory/config/JerseyConfig.java
- Registering OpenApi resources for generation of OpenApi swagger spec here.


/src/main/java/com/kaufland/property/directory/config/SwaggerConfig.java
- Some configuration for re-directing to the swagger ui.


/src/main/java/com/kaufland/property/directory/controller/IndexController.java
- A controller for re-directing to the swagger ui by default.


/src/test/java/com/kaufland/property/directory/service/geocoder/GeocodingAPIInboundSwaggerOpenApiTestIT.java
- This test uses Atlassian's OpenApiValidationFilter to validate our code against our OpenAPI Swagger spec file,
  which is describing our APIs. It is using a custom OpenAPIModifer.class to modify our OpenAPI Swagger spec file
  before it runs the tests. This is so, because the OpenAPI validator will check for all possible components and
  properties and fail if any one  of them is null or missing. This would mean we have to mock basically everything
  which is not feasible. So, instead OpenAPIModifer.class adds the "nullable" property to our OpenAPI spec, so that
  we can test only for the paths, components, schemas etc. which we are currently interested in in any given test.


/src/test/java/com/kaufland/property/directory/OpenAPIModifier.java
- This is a custom OpenAPIModifer.class to modify our OpenAPI Swagger spec file before the tests run.
  This is so, because Atlassian's OpenAPI validator will check for all possible components and properties and fail
  if any one of them is null or missing. This would mean we have to mock basically everything which is not feasible.
  So, instead OpenAPIModifer.class adds the "nullable" property to our OpenAPI spec, so that we can test only for
  the paths, components, schemas etc. which we are currently interested in, in any given test.
  
  
---
---
---

- `doa-property-directory/pom.xml`
  - Necessary dependencies and plugins added.


- `/src/main/resources/application.yml`
  - Springdoc dependency configuration.


- `/src/main/resources/openapi-configuration.yaml`
  - Configuration which influances the generation of an OpenAPI Swagger spec file from our existing codebase.
  In this case it is used to add some information which was missing from the generated OpenAPI Swagger spec file,
  which is necessary to make it valid, for example the "info" and "servers" sections.


- `/src/main/java/com/kaufland/property/directory/config/JerseyConfig.java`
  - Registering OpenApi resources for generation of OpenApi swagger spec here.


- `/src/main/java/com/kaufland/property/directory/config/SwaggerConfig.java`
    - Some configuration for re-directing to the swagger ui.


- `/src/main/java/com/kaufland/property/directory/controller/IndexController.java`
    - A controller for re-directing to the swagger ui by default.


- `/src/test/java/com/kaufland/property/directory/service/geocoder/GeocodingAPIInboundSwaggerOpenApiTestIT.java`
  - This test uses Atlassian's OpenApiValidationFilter to validate our code against our OpenAPI Swagger spec file,
  which is describing our APIs. It is using a custom OpenAPIModifer.class to modify our OpenAPI Swagger spec file
  before it runs the tests. This is so, because the OpenAPI validator will check for all possible components and
  properties and fail if any one  of them is null or missing. This would mean we have to mock basically everything
  which is not feasible. So, instead OpenAPIModifer.class adds the "nullable" property to our OpenAPI spec, so that
  we can test only for the paths, components, schemas etc. which we are currently interested in in any given test.


- `/src/test/java/com/kaufland/property/directory/OpenAPIModifier.java`
  - This is a custom OpenAPIModifer.class to modify our OpenAPI Swagger spec file before the tests run.
  This is so, because Atlassian's OpenAPI validator will check for all possible components and properties and fail
  if any one of them is null or missing. This would mean we have to mock basically everything which is not feasible.
  So, instead OpenAPIModifer.class adds the "nullable" property to our OpenAPI spec, so that we can test only for
  the paths, components, schemas etc. which we are currently interested in, in any given test.
  
---

--------------------------------
--------------------------------
--------------------------------

http://localhost:8080/swagger-ui/index.html?urls.primaryName=springfox-generated-openapi-spec

http://localhost:8080/swagger-openapi-specs/spring-petstore-jaxrs-v1-springfox-generated-swagger-openapi-spec.json

http://localhost:8080/spring-petstore-jaxrs-v1-openapi.json

http://localhost:8080/v3/api-docs/



http://localhost:8080/v3/api-docs/swagger-config

---

http://localhost:8080/swagger.json

http://localhost:8080/swagger-ui/index.html?urls.primaryName=jax-rs-petfood-swagger-openapi-spec

--------------------------------
--------------------------------
--------------------------------


can you please write a java jax-rs rest service implementation using jersey configuration on the swagger openapi pet store api specification
ANSWER
To implement a Java JAX-RS REST service using Jersey configuration on the Swagger OpenAPI Pet Store API specification, the following steps can be followed:

First, we need to add the required dependencies for Jersey in our project. We can do this by adding the following dependency to our Gradle or Maven file:
compile 'org.glassfish.jersey.containers:jersey-container-servlet:2.25.1'

Next, we need to create a new Java class that will represent our REST service. We can use the @Path annotation to specify the path of our service, and the @GET, @POST, @PUT, @DELETE annotations to specify the HTTP methods that our service will support. We can also use the @Produces and @Consumes annotations to specify the media types that our service will produce and consume.
Here's an example of a simple REST service that returns a list of pets:

@Path("/pets")
public class PetService {

    @GET
    @Produces(MediaType.APPLICATION_JSON)
    public List<Pet> getPets() {
        // Code to retrieve list of pets from database or API
    }

    @POST
    @Consumes(MediaType.APPLICATION_JSON)
    public Response addPet(Pet pet) {
        // Code to add a new pet to the database or API
        return Response.status(Response.Status.CREATED).build();
    }

    @PUT
    @Path("/{id}")
    @Consumes(MediaType.APPLICATION_JSON)
    public Response updatePet(@PathParam("id") int id, Pet pet) {
        // Code to update an existing pet in the database or API
        return Response.status(Response.Status.OK).build();
    }

    @DELETE
    @Path("/{id}")
    public Response deletePet(@PathParam("id") int id) {
        // Code to delete an existing pet from the database or API
        return Response.status(Response.Status.NO_CONTENT).build();
    }
}
Once we have defined our REST service, we need to configure Jersey to use it. We can do this by creating a ResourceConfig object and registering our service with it. We can also configure other settings such as package scanning, logging, and error handling.
Here's an example of a configuration class that registers our PetService:

public class MyApplication extends ResourceConfig {

    public MyApplication() {
        register(PetService.class);
    }
}
Finally, we need to deploy our application to a servlet container such as Tomcat or Jetty. We can do this by creating a WAR file and deploying it to the container. We may also need to configure the container to use Jersey as its JAX-RS implementation.
Here's an example of a web.xml file that configures Jersey as the JAX-RS implementation:

<web-app>
  <servlet>
    <servlet-name>MyApplication</servlet-name>
    <servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>
    <init-param>
      <param-name>javax.ws.rs.Application</param-name>
      <param-value>com.example.MyApplication</param-value>
    </init-param>
  </servlet>
  <servlet-mapping>
    <servlet-name>MyApplication</servlet-name>
    <url-pattern>/api/*</url-pattern>
  </servlet-mapping>
</web-app>
To use the Swagger OpenAPI Pet Store API specification in our service, we can generate Java classes from the Swagger definition using a code generator such as Swagger Codegen. We can then use these classes in our service to interact with the API.
Here's an example of how we can use the generated PetApi class to retrieve a list of pets from the Swagger API:

@Path("/pets")
public class PetService {

    private PetApi petApi;

    public PetService() {
        this.petApi = new PetApi();
    }

    @GET
    @Produces(MediaType.APPLICATION_JSON)
    public List<Pet> getPets() {
        List<Pet> pets = petApi.findPetsByStatus(Arrays.asList("available"));
        return pets;
    }

    // Other methods...
}
Overall, using JAX-RS and Jersey can make the development of RESTful services easier and more standardized. It provides a set of annotations and interfaces that allow us to define our service in a clear and concise way, and it also provides a built-in client library that we can use for testing and building clients. However, we also need to be aware of the different implementations of JAX-RS and choose the one that best fits our needs. Additionally, using Swagger OpenAPI can help us to create a more standardized and interoperable API by providing a machine-readable definition of our service.

 
--------------------------------
--------------------------------
--------------------------------



Sure, here's a sample implementation of a Java JAX-RS REST service using Jersey based on the provided OpenAPI Petstore API specification:

java
Copy code
import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

@ApplicationPath("/")
public class PetstoreApplication extends Application {
  // Left empty intentionally
}
java
Copy code
import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.FormParam;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.UriInfo;

@Path("/pet")
public class PetResource {

  @PUT
  @Consumes(MediaType.APPLICATION_JSON)
  public Response updatePet(Pet pet) {
    // Implementation code goes here
    return Response.ok().build();
  }

  @POST
  @Consumes(MediaType.APPLICATION_JSON)
  public Response addPet(Pet pet) {
    // Implementation code goes here
    return Response.ok().build();
  }

  @GET
  @Path("/findByStatus")
  public Response findPetsByStatus(@QueryParam("status") String status) {
    // Implementation code goes here
    return Response.ok().build();
  }

  @GET
  @Path("/findByTags")
  public Response findPetsByTags(@QueryParam("tags") String tags) {
    // Implementation code goes here
    return Response.ok().build();
  }

  @GET
  @Path("/{petId}")
  public Response getPetById(@PathParam("petId") Long petId) {
    // Implementation code goes here
    return Response.ok().build();
  }

  @POST
  @Path("/{petId}")
  public Response updatePetWithForm(
      @PathParam("petId") Long petId,
      @FormParam("name") String name,
      @FormParam("status") String status) {
    // Implementation code goes here
    return Response.ok().build();
  }

  @DELETE
  @Path("/{petId}")
  public Response deletePet(@PathParam("petId") Long petId) {
    // Implementation code goes here
    return Response.ok().build();
  }
}
Note that the implementation of the service methods has been omitted, as the details of the implementation will depend on your specific requirements. Also, the Pet class referenced in the implementation is assumed to be a Java object that represents a Pet, which should contain fields corresponding to the properties of the Pet specified in the OpenAPI specification.


---

can you please write a java jax-rs rest service implementation using jersey best on this api specification:

openapi: 3.0.0
info:
  title: OpenAPI Petstore
  description: This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters. For OAuth2 flow, you may use `user` as both username and password when asked to login.
  license:
    name: Apache-2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about OpenAPI generator
  url: https://openapi-generator.tech
tags:
- name: pet
  description: Everything about your Pets
- name: store
  description: Access to Petstore orders
- name: user
  description: Operations about user
paths:
  /pet:
    put:
      tags:
      - pet
      summary: Update an existing pet
      operationId: updatePet
      requestBody:
        $ref: '#/components/requestBodies/Pet'
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Pet not found
        405:
          description: Validation exception
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      x-accepts: application/json
      x-tags:
      - tag: pet
      x-contentType: application/json
    post:
      tags:
      - pet
      summary: Add a new pet to the store
      operationId: addPet
      requestBody:
        $ref: '#/components/requestBodies/Pet'
      responses:
        405:
          description: Invalid input
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      x-accepts: application/json
      x-tags:
      - tag: pet
      x-contentType: application/json
  /pet/findByStatus:
    get:
      tags:
      - pet
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
      - name: status
        in: query
        description: Status values that need to be considered for filter
        required: true
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
            default: available
            enum:
            - available
            - pending
            - sold
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        400:
          description: Invalid status value
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      x-accepts: application/json
      x-tags:
      - tag: pet
  /pet/findByTags:
    get:
      tags:
      - pet
      summary: Finds Pets by tags
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      operationId: findPetsByTags
      parameters:
      - name: tags
        in: query
        description: Tags to filter by
        required: true
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        400:
          description: Invalid tag value
      deprecated: true
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      x-accepts: application/json
      x-tags:
      - tag: pet
  /pet/{petId}:
    get:
      tags:
      - pet
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      parameters:
      - name: petId
        in: path
        description: ID of pet to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        400:
          description: Invalid ID supplied
        404:
          description: Pet not found
      security:
      - api_key: []
      x-accepts: application/json
      x-tags:
      - tag: pet
    post:
      tags:
      - pet
      summary: Updates a pet in the store with form data
      operationId: updatePetWithForm
      parameters:
      - name: petId
        in: path
        description: ID of pet that needs to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body'
      responses:
        405:
          description: Invalid input
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      x-accepts: application/json
      x-tags:
      - tag: pet
      x-contentType: application/x-www-form-urlencoded
    delete:
      tags:
      - pet
      summary: Deletes a pet
      operationId: deletePet
      parameters:
      - name: api_key
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
      - name: petId
        in: path
        description: Pet id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        400:
          description: Invalid pet value
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      x-accepts: application/json
      x-tags:
      - tag: pet
  /pet/{petId}/uploadImage:
    post:
      tags:
      - pet
      summary: uploads an image
      operationId: uploadFile
      parameters:
      - name: petId
        in: path
        description: ID of pet to update
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_1'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      x-accepts: application/json
      x-tags:
      - tag: pet
      x-contentType: multipart/form-data
  components:
  schemas:
    Order:
      title: Pet Order
      type: object
      properties:
        id:
          type: integer
          format: int64
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
          - placed
          - approved
          - delivered
        complete:
          type: boolean
          default: false
      description: An order for a pets from the pet store
      example:
        petId: 6
        quantity: 1
        id: 0
        shipDate: 2000-01-23T04:56:07.000+00:00
        complete: false
        status: placed
      xml:
        name: Order
    Category:
      title: Pet category
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      description: A category for a pet
      example:
        name: name
        id: 6
      xml:
        name: Category
    User:
      title: a User
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
      description: A User who is purchasing from the pet store
      example:
        firstName: firstName
        lastName: lastName
        password: password
        userStatus: 6
        phone: phone
        id: 0
        email: email
        username: username
      xml:
        name: User
    Tag:
      title: Pet Tag
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      description: A tag for a pet
      example:
        name: name
        id: 1
      xml:
        name: Tag
    Pet:
      title: a Pet
      required:
      - name
      - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
          - available
          - pending
          - sold
      description: A pet for sale in the pet store
      example:
        photoUrls:
        - photoUrls
        - photoUrls
        name: doggie
        id: 0
        category:
          name: name
          id: 6
        tags:
        - name: name
          id: 1
        - name: name
          id: 1
        status: available
      xml:
        name: Pet
    ApiResponse:
      title: An uploaded response
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      description: Describes the result of uploading an image resource
      example:
        code: 0
        type: type
        message: message
    body:
      type: object
      properties:
        name:
          type: string
          description: Updated name of the pet
        status:
          type: string
          description: Updated status of the pet
    body_1:
      type: object
      properties:
        additionalMetadata:
          type: string
          description: Additional data to pass to server
        file:
          type: string
          description: file to upload
          format: binary
  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      required: true
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
      required: true
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: /api/oauth/dialog
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header



--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------
--------------------------------


--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------

--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------


--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------


--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------


--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------

--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------


--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------


--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------


--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------

--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------


--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------




--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------


--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------

--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------


--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------


--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------

--------------------------------
--------------------------------
--------------------------------

--------------------------------
--------------------------------
--------------------------------

 
--------------------------------
--------------------------------
--------------------------------
--------------------------------

--------------------------------


